#include <bits/stdc++.h>
#define lli long long int
#define pb push_back
#define mod 1000000007
#define mod2 998244353
#define MAXN 1000000000
#define v32 vector<int>
#define v64 vector<lli>
#define v1024 vector <vector <int>>
#define v4096 vector <vector <lli>>
#define vt vector
#define f(x, y, z) for (lli x = y; x < z; x++)
#define fd(x, y, z) for (lli x = y; x > z; x--)
#define lb lower_bound
#define ld long double
#define m64 map<lli,lli>
#define m32 map<int,int>
#define m64it map<lli,lli>::iterator
#define m32it map<int,int>::iterator
#define fastio ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define ist insert
using namespace std;
lli tmod(lli x,lli m){return (x%m+m)%m;}
int T[100000],P[100000][20],L[100000];
void lca_pre_process(int N)
{
   int i, j; 
 
   //we initialize every element in P with -1
   for (i = 0; i < N; i++)
   for (j = 0; 1 << j < N; j++)
   P[i][j] = -1; 
 
   //the first ancestor of every node i is T[i]
   for (i = 0; i < N; i++)
   P[i][0] = T[i]; 
 
   //bottom up dynamic programing
   for (j = 1; 1 << j < N; j++)
   for (i = 0; i < N; i++)
   if (P[i][j - 1] != -1)
   P[i][j] = P[P[i][j - 1]][j - 1];
}
 
int lca_query(int p, int q)
{
   int tmp, log, i; 
 
   //if p is situated on a higher level than q then we swap them
   if (L[p] < L[q])
   tmp = p, p = q, q = tmp; 
 
   //we compute the value of [log(L[p)]
   for (log = 1; 1 << log <= L[p]; log++);
   log--; 
 
   //we find the ancestor of node p situated on the same level
   //with q using the values in P
   for (i = log; i >= 0; i--)
   if (L[p] - (1 << i) >= L[q])
   p = P[p][i]; 
 
  if (p == q)
   return p; 
 
  //we compute LCA(p, q) using the values in P
  for (i = log; i >= 0; i--)
  if (P[p][i] != -1 && P[p][i] != P[q][i])
  p = P[p][i], q = P[q][i]; 
 
  return T[p];
}

struct tree_node
{
	v32 adj;
	int level=0,parent=0,val=0;
};

void dfs(int u,int p,vt <tree_node> &tree)
{ 
	for(auto x:tree[u].adj)
	{
		if(x==p)continue;
        tree[x].parent=u;
        tree[x].level=tree[u].level+1;
        dfs(x,u,tree);
	}
}
 
int main() 
{ 
  fastio;	
  int n;cin>>n;
  vt <tree_node> tree(n);
  f(i,0,n-1)
  {
  	int u,v;cin>>u>>v;
  	u--,v--;
  	tree[u].adj.pb(v);
  	tree[v].adj.pb(u);
  }
  dfs(0,-1,tree);
  f(i,0,n)T[i]=tree[i].parent;
  f(i,0,n)L[i]=tree[i].level;
  T[0]=0;
  lca_pre_process(n);
  
  
  return 0;	
}